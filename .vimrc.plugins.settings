" theme settings
" colorscheme base16-ocean
colorscheme onedark
let g:onedark_terminal_italics = 1

" airline
"let g:airline_powerline_fonts = 1
"let g:airline_theme='base16'
let g:lightline = {
    \ 'colorscheme': 'onedark',
    \ }

" gitgutter
set signcolumn=yes
let g:gitgutter_sign_added = '++'
let g:gitgutter_sign_modified = '~~'
let g:gitgutter_sign_removed = '__'
let g:gitgutter_sign_removed_first_line = '¯¯'
let g:gitgutter_sign_modified_removed = '~_'

" deoplete
set completeopt=longest,menuone
let g:deoplete#auto_completion_start_length = 1
let g:deoplete#enable_at_startup = 1
let g:deoplete#max_list = 5
let g:deoplete#omni#functions = {}
let g:deoplete#sources = {}
let g:deoplete#enable_smart_case = 1
let g:AutoPairsMapCR=0
let g:deoplete#enable_camel_case = 1
let g:deoplete#skip_chars = ['(', ')', '<', '>']
" Movement within 'ins-completion-menu'
imap <expr><C-j>   pumvisible() ? "\<Down>" : "\<C-j>"
imap <expr><C-k> pumvisible() ? "\<Up>" : "\<C-k>"

" emmet
let g:user_emmet_install_global = 0
autocmd FileType html,css,eex EmmetInstall

" easymotion
" let g:EasyMotion_smartcase = 1
" let g:EasyMotion_keys='qwertyuiopasdfghjklzxcvbnm'

" neomake
" let g:neomake_javascript_enabled_makers = ['eslint']
" let g:neomake_jsx_enabled_makers = ['eslint']
" let g:neomake_error_sign = {'text': 'xx'}
" let g:neomake_warning_sign = {'text': '!!'}

" nerdcommenter
let g:NERDSpaceDelims = 1

" UltiSnips
let g:UltiSnipsExpandTrigger="<C-tab>"
let g:UltiSnipsJumpForwardTrigger="<C-b>"
let g:UltiSnipsJumpBackwardTrigger="<C-z>"
let g:UltiSnipsSnippetsDir="~/.snippets/"
inoremap <C-Space> <c-r>=UltiSnips#ExpandSnippet()<cr>

" vim-javascript
let g:javascript_plugin_flow = 1
augroup javascript_folding
  au!
  au FileType javascript setlocal foldmethod=syntax
augroup END

" vim-jsx
let g:jsx_ext_required = 0

" nerdtree
let NERDTreeMapActivateNode='l'
let NERDTreeMinimalUI=1
let NERDTreeRespectWildIgnore=1
let NERDTreeIgnore = ['bin/*', 'log/', 'tmp/*', 'vendor/*', 'node_modules', 'config.ru', 'Gemfile.lock', 'bower_components', 'pem']

" FZF
let $FZF_DEFAULT_COMMAND = 'ag -l -g ""'

let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

let g:fzf_layout = { 'down': '~40%' }
" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }
let g:fzf_history_dir = '~/.local/share/fzf-history'

" -------------- Fix auto insert _Plug_ of vim-multiple-cursors and deoplete ----------
" Called once right before you start selecting multiple cursors
function! Multiple_cursors_before()
  if exists(':NeoCompleteLock')==2
    exe 'NeoCompleteLock'
  endif
endfunction

" Called once only when the multiple selection is canceled (default <Esc>)
function! Multiple_cursors_after()
  if exists(':NeoCompleteUnlock')==2
    exe 'NeoCompleteUnlock'
  endif
endfunction
" ----------------------------------------------------------------------------------------

" Autocommands
if has("autocmd")

  " disable comment continuation
  autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

  " set neomake's eslint path to the local eslint, and enable it as a maker
  " autocmd BufEnter *.js,*.jsx let b:neomake_javascript_eslint_exe = nrun#Which('eslint')
  autocmd! BufEnter,BufWritePost * Neomake

  " better syntax highlighting
  autocmd BufNewFile,BufRead *eslintrc,*babelrc setlocal syntax=json

  " Treat .md files as Markdown
  autocmd BufNewFile,BufRead *.md setlocal filetype=markdown

endif

" Searching
if executable('ag')

  " use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " define Ag command
  command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!

  " bind \ to grep shortcut
  nnoremap \ :Ag<SPACE>

endif
